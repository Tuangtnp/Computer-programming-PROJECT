#include "PMS.h" 
#include <Wire.h> 
// ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πâ‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö I2C
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2); // ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ set address ‡∏Ç‡∏≠‡∏á LCD I2c 0x27 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 16 colum 2 row 
PMS pms(Serial); //‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß PMS ‡∏Ç‡∏≠‡∏á library PMS
PMS::DATA data; //‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏• data ‡∏Ç‡∏≠‡∏á library PMS

int red = A0; //‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏• ‡πÉ‡∏´‡πâ red = analog0
int green = A1; //‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏• ‡πÉ‡∏´‡πâ green = analog1
int blue = A2; //‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏• ‡πÉ‡∏´‡πâ blue = analog2

/*‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ analog ‡∏Å‡πá‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡πÅ‡∏™‡∏á‡πÑ‡∏î‡πâ 0-1023 ‡πÅ‡∏•‡∏∞ ‡∏ú‡∏™‡∏°‡∏™‡∏µ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
  LED rgb ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏°‡∏µ common ‡πÄ‡∏õ‡πá‡∏ô cathode ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏•‡∏á GND
  ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ digitalWrite(red, LOW); ‡∏Ñ‡∏∑‡∏≠‡∏î‡∏±‡∏ö
  ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ digitalWrite(red, HIGH); ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
*/

void goodLevelLight() { //Green light
  digitalWrite(red, LOW);
  analogWrite(green, 512);
  digitalWrite(blue, LOW);
}

void moderateLevelLight() { //Yellow light
  analogWrite(red, 512);
  analogWrite(green, 200);
  digitalWrite(blue, LOW);
}

void unhealthyLevelLight() { //Orange light
  analogWrite(red, 512);
  digitalWrite(green, LOW);
  digitalWrite(blue, LOW);
}

void hazardousLevelLight() { //Pueple light
  analogWrite(red, 512);
  digitalWrite(green, LOW);
  analogWrite(blue, 512);
}

/*‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ 1 colum ‡∏à‡∏∞‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° 5 colum 8 row ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ‡πÑ‡∏î‡πâ
  ‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏ü‡∏ï‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏π‡∏õ‡∏´‡∏±‡∏ß‡πÉ‡∏à
  byte heart[] = {
  B00000,
  B00000, 
  B01010,  # #
  B10101, # # #
  B10001, #   #
  B01010,  # #
  B00100,   #
  B00000
};*/

byte sad[] = { // ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏®‡∏£‡πâ‡∏≤
  B00000,     
  B00000,     
  B01010,     // # #
  B00000,
  B01110,     // ###
  B10001,     //#   #
  B10001,     //#   #
  B00000
};

byte smile[] = { //‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ ‡∏¢‡∏¥‡πâ‡∏°
  B00000,
  B00000,
  B01010,     // # #
  B00000,   
  B10001,     //#   #
  B10001,     //#   #
  B01110,     // ###
  B00000
};

byte expressionless[] = {// ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏¥‡πà‡∏á
  B00000,    
  B00000, 
  B01010,    // # # 
  B00000,    
  B00000,
  B11111,    //#####
  B00000,
  B00000
};

byte gasmask[] = { //‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ gasmask 
  B01110,     //  #####
  B11111,     //#########
  B10101,     //## ### ##
  B11111,     //#########
  B01110,     //  #####
  B11011,     //#### ####
  B11011,     //#### ####
  B00000
};

void setup()
{
  pinMode(red, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(blue, OUTPUT);
  lcd.begin();
  /* ‡∏ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏≤ comment ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏∞‡∏õ‡∏¥‡∏î blacklight ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏à‡∏∞‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å 
    ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á I2C ‡∏≠‡∏≠‡∏Å‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô*/
  //lcd.noBacklight();
  Serial.begin(9600);
  lcd.setCursor(3,0); // ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ß‡πâ colum ‡∏ó‡∏µ‡πà 3 row 1
  lcd.print("Boosting...");
  delay(1000);
}

void loop()
{
  //‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  if (pms.read(data)){
    //SYNTEX lcd.createChar(num, data)
    //‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß custom character ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô 0,1,2,3
    //‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á lcd.write(num) ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡∏á‡πÑ‡∏õ
    lcd.createChar(0, smile); 
    lcd.createChar(1, expressionless);
    lcd.createChar(2, sad);
    lcd.createChar(3, gasmask);

    // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Serial moniter
    Serial.print("PM 2.5 (ug/m3): "); 
    Serial.println(data.PM_AE_UG_2_5);

    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á PM2.5 ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 50
    if (data.PM_AE_UG_2_5 <= 50) {
      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ clear LCD ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      lcd.clear();
      lcd.setCursor(0, 0); // ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà colum 0 row 0
      /*‡πÉ‡∏ô library ‡∏ô‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á ‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÉ‡∏ä‡πâprint(data.PM_AE_UG_2_5);
        ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á PM10 data.PM_AE_UG_1_0*
        ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á PM10 data.PM_AE_UG_10_0*/
      lcd.print("PM2.5 :" + String(data.PM_AE_UG_2_5) + " ug/m3");
      //print ‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á PM2.5 :45 ug/m3
      lcd.setCursor(0,1); // ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà colum 0 row 1
      lcd.print("Air:  "); 
      lcd.write(0);
      lcd.print(" Good ");
      lcd.write(0); //print custom character smile
      //‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Air:  üôÇ Good üôÇ
      goodLevelLight(); //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
      delay(1000); //delay 1 ‡∏ß‡∏¥
    }
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á PM2.5 ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 51 ‡∏ñ‡∏∂‡∏á 100
    else if (data.PM_AE_UG_2_5 > 50 && data.PM_AE_UG_2_5 <= 100) {
      lcd.clear();  
      lcd.setCursor(0, 0);
      lcd.print("PM2.5 :" + String(data.PM_AE_UG_2_5) + " ug/m3");
      //‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á PM2.5 :85 ug/m3
      lcd.setCursor(0,1);
      lcd.print("Air: Moderate ");
      lcd.write(1);
      //‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Air: Moderate  üòê
      moderateLevelLight(); //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
      delay(1000);
     }
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á PM2.5 ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 101 ‡∏ñ‡∏∂‡∏á 300 
    else if (data.PM_AE_UG_2_5 >= 101 && data.PM_AE_UG_2_5 <= 300) {
      lcd.clear();
      lcd.setCursor(0, 0);
     lcd.print("PM2.5 :" + String(data.PM_AE_UG_2_5) + " ug/m3");
      //‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á PM2.5 :125 ug/m3
      lcd.setCursor(0,1);
      lcd.print("Air: Unhealthy ");
      lcd.write(2);
      //‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Air: Unhealthy  ‚òπ
      unhealthyLevelLight(); //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡πÅ‡∏î‡∏á
      delay(1000); 
    }
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á PM2.5 ‡∏°‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 301
    else if (data.PM_AE_UG_2_5 >= 301) {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("PM2.5 :" + String(data.PM_AE_UG_2_5) + " ug/m3");
      //‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á PM2.5 :600 ug/m3
      lcd.setCursor(0,1);
      lcd.print("Air: Hazardous ");
      lcd.write(3);
      //‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Air: Hazardous  (gasmask character)
      hazardousLevelLight(); //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏°‡πà‡∏ß‡∏á
      delay(1000);
    }
  } 
}
